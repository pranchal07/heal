version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: healthsync-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-healthsync_db}
      POSTGRES_USER: ${POSTGRES_USER:-healthsync_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-healthsync_password}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/database/migration.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
    networks:
      - healthsync-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-healthsync_user} -d ${POSTGRES_DB:-healthsync_db}"]
      interval: 10s
      timeout: 5s
      retries: 5

  api:
    build:
      context: ./backend
      dockerfile: ../Dockerfile
    container_name: healthsync-api
    restart: unless-stopped
    ports:
      - "${PORT:-3000}:3000"
    environment:
      NODE_ENV: production
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${POSTGRES_DB:-healthsync_db}
      DB_USER: ${POSTGRES_USER:-healthsync_user}
      DB_PASSWORD: ${POSTGRES_PASSWORD:-healthsync_password}
      PORT: 3000
      LOG_LEVEL: info
    volumes:
      - ./backend/logs:/app/logs
    networks:
      - healthsync-network
    depends_on:
      postgres:
        condition: service_healthy

  frontend:
    image: nginx:alpine
    container_name: healthsync-frontend
    restart: unless-stopped
    ports:
      - "8080:80"
    volumes:
      - ./frontend:/usr/share/nginx/html:ro
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    networks:
      - healthsync-network
    depends_on:
      - api

volumes:
  postgres_data:
    driver: local

networks:
  healthsync-network:
    driver: bridge